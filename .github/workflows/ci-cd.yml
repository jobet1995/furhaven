name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: ${{ vars.DOCKERHUB_USERNAME}}/furhaven
  DOCKER_TAG: ${{ github.sha }}
  DOCKERFILE_PATH: ./Dockerfile
  DOCKER_CONTEXT: .
  SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  REMOTE_USER: ${{ secrets.REMOTE_USER }}
  REMOTE_PATH: /path/to/deploy/directory

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      env:
        DJANGO_SETTINGS_MODULE: furhaven.settings
        DATABASE_URL: sqlite:///db.sqlite3
        SECRET_KEY: test-secret-key
      run: |
        python manage.py test --noinput

  build-and-push:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=sha
          type=ref,event=branch
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ${{ env.DOCKER_CONTEXT }}
        file: ${{ env.DOCKERFILE_PATH }}
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Deploy to server
      env:
        DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}:sha-${{ github.sha }}
      run: |
        # Create necessary directories on remote server
        ssh -o StrictHostKeyChecking=no ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} \
          "mkdir -p ${{ env.REMOTE_PATH }}/.envs/prod"
        
        # Copy .env file (you might want to manage this differently in production)
        scp -o StrictHostKeyChecking=no .env \
          ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }}:${{ env.REMOTE_PATH }}/.env
        
        # Pull and run the new container
        ssh -o StrictHostKeyChecking=no ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} \
          "cd ${{ env.REMOTE_PATH }} && \
           docker-compose pull && \
           docker-compose up -d --force-recreate --no-deps web"
        
        # Run migrations
        ssh -o StrictHostKeyChecking=no ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} \
          "cd ${{ env.REMOTE_PATH }} && \
           docker-compose exec -T web python manage.py migrate --noinput"
        
        # Collect static files
        ssh -o StrictHostKeyChecking=no ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} \
          "cd ${{ env.REMOTE_PATH }} && \
           docker-compose exec -T web python manage.py collectstatic --noinput"
        
        # Restart the application
        ssh -o StrictHostKeyChecking=no ${{ env.REMOTE_USER }}@${{ env.REMOTE_HOST }} \
          "cd ${{ env.REMOTE_PATH }} && \
           docker-compose restart web"
